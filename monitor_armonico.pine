//@version=4
study(title = "Monitor Armónico", shorttitle="Monitor Armónico", overlay=false)

// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// INPUTS
// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

showMonitorPrincipal = input(title='Mostrar monitor principal', type=input.bool, defval=true)
showMonitorSuperior  = input(title='Mostrar monitor de temporalidad superior', type=input.bool, defval=true, tooltip="Temporalidades soportadas: 1m/5m - 5m/15m - 1h/4h - 4h/D - D/S")
showSqueeze = input(title='Mostrar Squeeze', type=input.bool, defval=true)

// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// MONITOR PRINCIPAL
// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

length = input(20, title="BB Length")
mult = input(2.0,title="BB MultFactor")
lengthKC=input(20, title="KC Length")
multKC = input(1.5, title="KC MultFactor")

useTrueRange = input(true, title="Use TrueRange (KC)", type=input.bool)

// Calculate BB
source = close
basis = sma(source, length)
dev = multKC * stdev(source, length)
upperBB = basis + dev
lowerBB = basis - dev

// Calculate KC
ma = sma(source, lengthKC)
range = useTrueRange ? tr : (high - low)
rangema = sma(range, lengthKC)
upperKC = ma + rangema * multKC
lowerKC = ma - rangema * multKC

sqzOn  = (lowerBB > lowerKC) and (upperBB < upperKC)
sqzOff = (lowerBB < lowerKC) and (upperBB > upperKC)
noSqz  = (sqzOn == false) and (sqzOff == false)

scolor = noSqz ? color.blue : sqzOn ? color.black : color.white

momentumVal = linreg(source  -  avg(avg(highest(high, lengthKC), lowest(low, lengthKC)),sma(close,lengthKC)), lengthKC,0)

bcolor = iff( momentumVal > 0, iff( momentumVal > nz(momentumVal[1]), color.lime, color.teal), iff( momentumVal < nz(momentumVal[1]), color.red, color.maroon))

plot(showMonitorPrincipal ? momentumVal : na, title="Monitor Principal", color=bcolor, style=plot.style_columns, linewidth=4)
plot(showSqueeze ? 0 : na, color=scolor, title="Squeeze", style=plot.style_cross, linewidth=2)

// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// ADX
// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

showAdx = input(title='Mostrar ADX', type=input.bool, defval=true)

lensig = input(14, title="ADX")
key = input(23, title="Key")
scale=input(defval=14,title="Scala")
dx=input(defval=0,title="dx")
up = rma(max(change(source), 0), lensig)
down = rma(-min(change(source), 0), lensig)

dlen = lensig 
dup = change(high)
ddown = -change(low)
plusDM = na(up) ? na : (dup > ddown and dup > 0 ? dup : 0)
minusDM = na(down) ? na : (ddown > dup and ddown > 0 ? ddown : 0)
trur = rma(tr, dlen)
plus = fixnan(100 * rma(plusDM, dlen) / trur)
minus = fixnan(100 * rma(minusDM, dlen) / trur)
sum = plus + minus

hline(dx, color=color.new(color.silver, 50), title="dx",linestyle=hline.style_solid)

biggest(series) =>
    max = 0.0
    max := nz(max[1], series)
    if series > max
        max := series
    max

nl = biggest(momentumVal)
adx = (100 * rma(abs(plus - minus) / (sum == 0 ? 1 : sum), lensig) - (key) ) * nl/scale +dx

plot(showAdx ? adx : na, title="ADX", color=#0000FF, linewidth=2)


// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// MONITOR DE TEMPORALIDAD SUPERIOR
// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

calcularTemporalidadSuperior() =>
    temporalidadSoportada = false
    mutiplier = 1

    if timeframe.period == "1" //1m > 5m
        mutiplier := 5
        temporalidadSoportada := true
    else if timeframe.period == "5" //5m > 15m
        mutiplier := 3
        temporalidadSoportada := true
    else if timeframe.period == "15" //15m > 1h
        mutiplier := 4
        temporalidadSoportada := true
    else if timeframe.period == "60" //1h > 4h
        mutiplier := 4
        temporalidadSoportada := true
    else if timeframe.period == "240" //4h > D
        mutiplier := 6
        temporalidadSoportada := true
    else if timeframe.period == "D" // D > S
        mutiplier := 7
        temporalidadSoportada := true
    [mutiplier, temporalidadSoportada]

[mutiplier, temporalidadSoportada] = calcularTemporalidadSuperior()

lengthKC_2 = lengthKC * mutiplier

// Calculate KC
ma_2 = sma(source, lengthKC_2)
rangema_2 = sma(range, lengthKC_2)
upperKC_2 = ma_2 + rangema_2 * multKC
lowerKC_2 = ma_2 - rangema_2 * multKC

sqzOn_2  = (lowerBB > lowerKC_2) and (upperBB < upperKC_2)
sqzOff_2 = (lowerBB < lowerKC_2) and (upperBB > upperKC_2)

val_2 = linreg(source  -  avg(avg(highest(high, lengthKC_2), lowest(low, lengthKC_2)),sma(close,lengthKC_2)), lengthKC_2, 0)

bcolor_2 = iff( val_2 > 0, iff( val_2 > nz(val_2[1]), color.lime, color.teal), iff( val_2 < nz(val_2[1]), color.red, color.maroon))

plot(showMonitorSuperior and temporalidadSoportada ? val_2 : na, title="Monitor de temporalidad superior", color=color.new(bcolor_2, 80), style=plot.style_area, linewidth=2)