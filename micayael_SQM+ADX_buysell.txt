// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © micayael

//@version=4
study("Prueba", overlay=false)

length = input(20, title="BB Length")
mult = input(2.0,title="BB MultFactor")
lengthKC=input(20, title="KC Length")
multKC = input(1.5, title="KC MultFactor")
useTrueRange = input(true, title="Use TrueRange (KC)")

// Calculate BB
source = close
basis = sma(source, length)
dev = multKC * stdev(source, length)
upperBB = basis + dev
lowerBB = basis - dev

// Calculate KC
ma = sma(source, lengthKC)
range = useTrueRange ? tr : (high - low)
rangema = sma(range, lengthKC)
upperKC = ma + rangema * multKC
lowerKC = ma - rangema * multKC

sqzOn  = (lowerBB > lowerKC) and (upperBB < upperKC)
sqzOff = (lowerBB < lowerKC) and (upperBB > upperKC)
noSqz  = (sqzOn == false) and (sqzOff == false)

val = linreg(source  -  avg(avg(highest(high, lengthKC), lowest(low, lengthKC)),sma(close,lengthKC)), lengthKC,0)

bcolor = iff( val > 0, iff( val > nz(val[1]), color.lime, color.teal), iff( val < nz(val[1]), color.red, color.maroon))

scolor = noSqz ? color.blue : sqzOn ? color.black : color.white

plot(val, color=bcolor, style=plot.style_columns, linewidth=4)
plot(0, color=scolor, style=plot.style_cross, linewidth=2)

lensig = input(14, title="ADX")
key = input(23, title="Key")
scale=input(defval=14,title="Scala")
dx=input(defval=0,title="dx")
up = rma(max(change(source), 0), lensig)
down = rma(-min(change(source), 0), lensig)

dlen = lensig 
dup = change(high)
ddown = -change(low)
plusDM = na(up) ? na : (dup > ddown and dup > 0 ? dup : 0)
minusDM = na(down) ? na : (ddown > dup and ddown > 0 ? ddown : 0)
trur = rma(tr, dlen)
plus = fixnan(100 * rma(plusDM, dlen) / trur)
minus = fixnan(100 * rma(minusDM, dlen) / trur)
sum = plus + minus

hline(dx, color=color.new(color.silver, 50), title="KEY",linestyle=hline.style_solid)

biggest(series) =>
    max = 0.0
    max := nz(max[1], series)
    if series > max
        max := series
    max

nl = biggest(val)
adx = (100 * rma(abs(plus - minus) / (sum == 0 ? 1 : sum), lensig) - (key) ) * nl/scale +dx

plot(adx, color=color.fuchsia, title="ADX", linewidth=2)

ema10 = ema(close, 10)
ema55 = ema(close, 55)

adxAbove23 = adx[0] > key
adxBelow23 = adx[0] < key

adxGoingDown = adx[0] < adx[1]
adxGoingUp = adx[0] > adx[1]

monitorBullish = bcolor[0] == color.lime or bcolor[0] == color.teal
monitorBearish = bcolor[0] == color.red or bcolor[0] == color.maroon

monitorBullishGoingUp = val[0] >= val[1] and bcolor[0] == color.lime
monitorBullishGoingDown = val[0] < val[1] and bcolor[0] == color.teal

monitorBearinshGoingUp = val[0] > val[1] and bcolor[0] == color.maroon

var buySignalFlag = false
var sellSignalFlag = false

buySignal = monitorBearinshGoingUp and adxGoingDown and ema10 > ema55
sellSignal = monitorBullish and adxGoingDown

buySignalHidden = buySignal
sellSignalHidden = sellSignal

// escondo la señal y ya existe señal anterior
if(buySignal[0] and buySignalHidden[1])
    buySignal := false

if(sellSignal[0] and sellSignalHidden[1])
    sellSignal := false

plotshape(buySignal, title="Comprar", style=shape.arrowup, color=color.green, location=location.bottom)
plotshape(sellSignal, title="Vender", style=shape.arrowdown, color=color.red, location=location.top)
