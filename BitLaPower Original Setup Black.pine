// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//▒▒▒                                                               ▒▒▒
//▒▒▒                 © Bitcoiners Latinoamérica                    ▒▒▒
//▒▒▒              Última Actualización: 24 Agosto 2021             ▒▒▒ 
//▒▒▒                                                               ▒▒▒
//▒▒▒                           Oráculo                             ▒▒▒
//▒▒▒               Análisis por Micro Tendencia                    ▒▒▒
//▒▒▒                                                               ▒▒▒
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// Desarrollado por: Guillermo Arcos @Guillesonico
//                   Javier Rivera   @javierri
//                   Juan Ardissone  @juanardissone
//                   Rubén Cabrera   @rdconline
//                   Isaac Gil       @BitcoinersLa
//
//*********************************************************************
//
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//▒▒▒                                                               ▒▒▒
//▒▒▒                    Módulos de Datos                           ▒▒▒
//▒▒▒                                                               ▒▒▒ 
//▒▒▒   Módulo 1 - Señales Long y Short                             ▒▒▒
//▒▒▒   Módulo 2 - Cambio de Tendencia de la Media                  ▒▒▒
//▒▒▒   Módulo 3 - Zonas de kill                                    ▒▒▒
//▒▒▒   Módulo 4 - Reversal                                         ▒▒▒
//▒▒▒   Módulo 5 - Screnner                                         ▒▒▒
//▒▒▒   Modulo 6 - Cálculo de Rango                                 ▒▒▒
//▒▒▒                                                               ▒▒▒
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//
//IMPORTANTE: El trading de cryptomonedas es un instrumento especulativo de alto riesgo
//que podría llevar a la perdida total de tu capital, el presente algoritmo tiene un objetivo
//totalmente educativo y no representa ninguna asesoría financiera o de inversión.
// @version=4


study("BitLa.Power", shorttitle="BitLa Power",overlay=true)

//*********************************************************
//*   DECLARACIÓN DE INPUTS, VARIABLES Y CONSTANTES       *
//*********************************************************

//Módulo 1 - Activar Señales de Trading
ShowLong            = input(true, title = "Mostrar Longs")
ShowShort           = input(true, title = "Mostar Shorts")

// Módulo 2 - Activar Pullback

draw_mmar  = input(false, title = "Dibujar Pullback")

// Módulo 3 - Activar Kills y puntos Pivote
prd                 = input(defval = 2, title="Puntos Pivote", minval = 1, maxval = 50)
Factor              = input(defval = 3, title = "Factor ATR", minval = 1, step = 0.1)
Pd                  = input(defval = 10, title = "Periodo ATR", minval=1)
//showpivot           = input(defval = false, title="Mostrar Pivotes")
showlabel           = input(defval = true, title="Mostrar zonas de kill")
//showcl              = input(defval = false, title="Mostrar línea Central")
//showsr              = input(defval = false, title="Mostrar Soportes y Resistencias")

// Módulo 4 - Activar Reversal
type                = input(defval="High-Low", title="Estilo de Vela", options=["High-Low", "Open-Close","Just Color"])
rcol                = input(false, "Color de velas de regresion?", type=input.bool)
range               = input(50, minval=1, title="Rango Max/Min")
ccol                = input(false, "Color de velas de consolidación?", type=input.bool)
cons                = input(2, minval=1, title="Rango de Consolidación")


//Declaración de Constantes para Colores

color_LongFondo      = #101224 //#7E57C2
color_VerdeClaro     = #B2DFDB
color_ShortFondo     = #512DA8
color_RojoClaro      = #FFCDD2
color_RojoFuerte     = #b71c1c
color_AzulFuerte     = #0c3299
color_Blanco         = #FFFFFF
color_Amarillo       = #FFFF00
color_Azul           = #0094FF
color_Naranja        = #FF6A00
color_Morado         = #7E57C2
color_GrisClaro      = #9598A1
color_LongVikingo    = #1B1B31
color_ShortVikingo   = #FF0033 //#FF0000 = rojo
color_LongConservador= #058934
color_LongAgressive  = #006600
color_RevLong        = #FF9900 //#0DE800 = green fuerte
color_RevShort       = #710016 //#AE0000 = rojo encendido

//Declaración de EMAs

EMA_4   = ema(close,4  )
EMA_10  = ema(close,10 )
EMA_21  = ema(close,21 )
EMA_50  = ema(close,50 )
EMA_120 = ema(close,120)
EMA_200 = ema(close,200)
EMA_360 = ema(close,360)


bgcolor(color=color_ShortFondo, transp=95)


//*********************************************************
//*                     Módulo 1                          *
//*          Dibujar Señales Long y Short                 *
//*********************************************************

//Cálculos Power Vikingo para Longs

LongSingnal     = crossover (EMA_10,EMA_120)
ShortSingnal    = crossunder(EMA_10,EMA_120)
StopShort       = crossover (EMA_21,EMA_50)
StopLong        = crossunder(EMA_10,EMA_120)

plotshape(LongSingnal and ShowLong, color = color_LongConservador, style =shape.labelup , location = location.belowbar, size = size.tiny, text="Long", textcolor=color.white)   
plotshape(ShortSingnal and ShowShort, color = color_RojoFuerte, style =shape.labeldown , location = location.abovebar, size = size.tiny, text="Short", textcolor=color.white)   

//*********************************************************
//*                     Módulo 2                          *
//*                     Pullback                          *
//*********************************************************

//Cálculos 

mmar_src = close

mmar_ma55 = ema(mmar_src, 55) 
mmar_ma60 = ema(mmar_src, 60)
mmar_ma65 = ema(mmar_src, 65)
mmar_ma70 = ema(mmar_src, 70)
mmar_ma80 = ema(mmar_src, 80)
mmar_ma90 = ema(mmar_src, 90)
mmar_ma100 = ema(mmar_src, 100)
mmar_ma110 =ema(mmar_src, 110)
mmar_ma120 =ema(mmar_src, 120) 

leadMAColor = change(mmar_ma55)>=0 and mmar_ma55>mmar_ma120 ? color_LongConservador : change(mmar_ma55)<0  and mmar_ma55>mmar_ma120 ? color.maroon : change(mmar_ma55)<=0 and mmar_ma55<mmar_ma120 ? color_ShortVikingo : change(mmar_ma55)>=0 and mmar_ma55<mmar_ma120 ? color_LongConservador : color.gray

maColor(ma, maRef) => 
    change(ma)>=0 and mmar_ma55>maRef ? color_LongConservador : change(ma)<0  and mmar_ma55>maRef ? color.maroon : change(ma)<=0 and mmar_ma55<maRef ? color_ShortVikingo : change(ma)>=0 and mmar_ma55<maRef ? color_LongConservador : color.gray
            
plot( draw_mmar ? mmar_ma55 : na, color=maColor(mmar_ma55,mmar_ma120), style=plot.style_line, title="MMA55", linewidth=1, transp=85)
plot( draw_mmar ? mmar_ma60 : na, color=maColor(mmar_ma60,mmar_ma120), style=plot.style_line, title="MMA60", linewidth=1, transp=85)
plot( draw_mmar ? mmar_ma65 : na, color=maColor(mmar_ma65,mmar_ma120), style=plot.style_line, title="MMA65", linewidth=1, transp=85)
plot( draw_mmar ? mmar_ma70 : na, color=maColor(mmar_ma70,mmar_ma120), style=plot.style_line, title="MMA70", linewidth=1, transp=85)
plot( draw_mmar ? mmar_ma80 : na, color=maColor(mmar_ma80,mmar_ma120), style=plot.style_line, title="MMA80", linewidth=1, transp=85)
plot( draw_mmar ? mmar_ma90 : na, color=maColor(mmar_ma90,mmar_ma120), style=plot.style_line, title="MMA90", linewidth=1, transp=85)
plot( draw_mmar ? mmar_ma100 : na, color=maColor(mmar_ma100,mmar_ma120), style=plot.style_line, title="MMA100", linewidth=1, transp=85)
plot( draw_mmar ? mmar_ma110 : na, color=maColor(mmar_ma110,mmar_ma120), style=plot.style_line, title="MMA110", linewidth=1, transp=85)
plot( draw_mmar ? mmar_ma120 : na, color=maColor(mmar_ma120,mmar_ma120), style=plot.style_line, title="MMA120", linewidth=1, transp=85)


//*********************************************************
//*                     Módulo 3                          *
//*                   Zonas de Kill                       *
//*********************************************************

// Cálculos

float ph = na
float pl = na
ph := pivothigh(prd, prd)
pl := pivotlow(prd, prd)

float center = na
center := center[1]
float lastpp = ph ? ph : pl ? pl : na
if lastpp
    if na(center)
        center := lastpp
    else
        center := (center * 2 + lastpp) / 3

Up = center - (Factor * atr(Pd))
Dn = center + (Factor * atr(Pd))

float TUp = na
float TDown = na
Trend = 0
TUp := close[1] > TUp[1] ? max(Up, TUp[1]) : Up
TDown := close[1] < TDown[1] ? min(Dn, TDown[1]) : Dn
Trend := close > TDown[1] ? 1: close < TUp[1]? -1: nz(Trend[1], 1)
Trailingsl = Trend == 1 ? TUp : TDown
linecolor = Trend == 1 and nz(Trend[1]) == 1 ? color.lime : Trend == -1 and nz(Trend[1]) == -1 ? color.red : na
bsignal = Trend == 1 and Trend[1] == -1
ssignal = Trend == -1 and Trend[1] == 1

float resistance = na
float support = na
support := pl ? pl : support[1]
resistance := ph ? ph : resistance[1]

//Dibujar Kills
plotshape(bsignal and showlabel ? Trailingsl : na, title="Longs", text="", location = location.absolute, style = shape.labelup, size = size.tiny, color = color.green, textcolor = color.white, transp = 0)
plotshape(ssignal and showlabel ? Trailingsl : na, title="Shorts", text="", location = location.absolute, style = shape.labeldown, size = size.tiny, color = color.red, textcolor = color.white, transp = 0)


//*********************************************************
//*                     Módulo 4                          *
//*                     Reversal                          *
//*********************************************************

// Cálculos

opener = ((close[1]+open[1])/2)
closer = ((open+high+low+close)/4)
haO1 = ((opener[1]+closer[1])/2)
haC1 = ((opener+high+low+closer)/4)
haO = ((haO1[1]+haC1[1])/2)
haC = ((haO+high+low+haC1)/4)
haH = high
haL = low
btm = lowest(low,range)
top = highest(high,range)
tbtm = btm < btm[1]
ttop = top > top[1]
sideways = (hl2 < highest(cons)[1]) and (hl2 > lowest(cons)[1])
col= tbtm and rcol ? color.yellow : ttop and rcol ? color.yellow : sideways and ccol ? color.gray : haO < haC ? color.green : color.red 

barColour = if tbtm
    color=color_RevShort
else if ttop
    color=color_RevLong
else if (EMA_4>=EMA_120)
    color.green 
else if (EMA_4<=EMA_120)
    color=color_ShortVikingo
barcolor(color=barColour)

//*********************************************************
//*                     Módulo 5                          *
//*                     Screener                          *
//*********************************************************

// Dibujar Tabla

var table info = table.new(position.bottom_right, 3,7, border_width=1)

// Cálculo de Rangos por Periodos

formatear(minimo, maximo) =>
    trade1 = maximo * 100 / minimo - 100
    tostring(trade1, "0.0000") + "%"

rango1 = formatear(lowest(50), highest(50))
rango2 = formatear(lowest(100), highest(100))
rango3 = formatear(lowest(120), highest(120))

// Cálculo del Trading Range

formatear2(lowest1, highest1) =>
    trade2 = (lowest1 + highest1) / 2
    tostring(trade2, "0.0000") + "$"

TR1 = formatear2(lowest(50), highest(50))
TR2 = formatear2(lowest(120), highest(120))
TR3 = formatear2(lowest(120), highest(120))


// Cálculo Liquidaciones a Longs 50x

formatear3(lowest1, highest1) =>
    trade3 = ((lowest1 + highest1) / 2)
    operaA = trade3 * 0.0147
    operaB = trade3 - operaA
    tostring(operaB, "0.0000") + "$"

LIQ1 = formatear3(lowest(120), highest(120))

// Cálculo Liquidaciones a Short 50x

formatear4(lowest1, highest1) =>
    trade4 = ((lowest1 + highest1) / 2)
    operaC = trade4 * 0.0155
    operaD = trade4 + operaC
    tostring(operaD, "0.0000") + "$"

LIQ3 = formatear4(lowest(120), highest(120))

// Cálculo Liquidaciones a Long 25x

formatear5(lowest1, highest1) =>
    trade5 = ((lowest1 + highest1) / 2)
    operaE = trade5 * 0.033
    operaF = trade5 - operaE
    tostring(operaF, "0.0000") + "$"

LIQ2 = formatear5(lowest(120), highest(120))

// Cálculo Liquidaciones a Short 25x

formatear6(lowest1, highest1) =>
    trade6 = ((lowest1 + highest1) / 2)
    operaG = trade6 * 0.037
    operaH = trade6 + operaG
    tostring(operaH, "0.0000") + "$"

LIQ4 = formatear6(lowest(120), highest(120))

// Cálculo TP1

formatear7(lowest1, highest1) =>
    trade7 = highest1
    tostring(trade7, "0.0000") + "$"

TAR1 = formatear7(lowest(120), highest(120))

// Cálculo TP2

formatear8(lowest1, highest1) =>
    trade8 = (highest1 - lowest1) / 2 
    operaK = highest1 + trade8
    tostring(operaK, "0.0000") + "$"

TAR2 = formatear8(lowest(120), highest(120))

//Dibujar Datos

if barstate.islast
    //Titutlos
    //table.cell(info, 0,0, "   ", bgcolor=color.new(color_Morado,90), text_color=color.white)
    //table.cell(info, 1,0, "200 ", bgcolor=color.new(color_Morado,90), text_color=color.white)
    //table.cell(info, 2,0, "100 ", bgcolor=color.new(color_Morado,90), text_color=color.white)
    

    //Info
    table.cell(info, 0,1, "Rango"    , bgcolor=color.new(color_Morado,90), text_color=color.white)
    table.cell(info, 0,2, "TR", bgcolor=color.new(color_Morado,90), text_color=color.white)
    table.cell(info, 0,3, "Liq 50x"     , bgcolor=color.new(color_Morado,90), text_color=color.white)
    table.cell(info, 0,4, "Liq 25x"     , bgcolor=color.new(color_Morado,90), text_color=color.white)
    

    //Celdas
    table.cell(info, 1, 1, rango3, bgcolor=color.new(color_Morado,95), text_color=color.white)
    table.cell(info, 1, 2, TR3, bgcolor=color.new(color_Morado,95), text_color=color.white)
    table.cell(info, 1, 3, LIQ1, bgcolor=color.new(color_ShortVikingo,85), text_color=color.white)
    table.cell(info, 2, 3, LIQ3, bgcolor=color.new(color.green,85), text_color=color.white)
    table.cell(info, 1, 4, LIQ2, bgcolor=color.new(color_ShortVikingo,85), text_color=color.white)
    table.cell(info, 2, 4, LIQ4, bgcolor=color.new(color.green,85), text_color=color.white)
    

//*********************************************************
//*                     Módulo 6                          *
//*                 Cálculo de Rango                      *
//*********************************************************

//Fiblines
len = input(title = "Period", defval = 120)
fractal_top = 0.0
fractal_top := (high < high[2]) and (high[1] < high[2]) and (high[3] < high[2]) and (high[4] < high[2]) ? high[2] : fractal_top[1]
fractal_bottom = 0.0
fractal_bottom := (low > low[2]) and (low[1] > low[2]) and (low[3] > low[2]) and (low[4] > low[2]) ? low[2] : fractal_bottom[1]

srcHigh = highest(fractal_top, len)
srcLow = lowest(fractal_bottom, len)
diff = srcHigh - srcLow
line0000 = srcLow
line0236 = srcLow + (diff * 0.236)
line0382 = srcLow + (diff * 0.450)
line0500 = srcLow + (diff * 0.500)
line0618 = srcLow + (diff * 0.550)
line0786 = srcLow + (diff * 0.786)
line1000 = srcHigh
line1272 = srcLow + (diff * 1.272)
line1414 = srcLow + (diff * 1.414)
line1618 = srcLow + (diff * 1.618)
line2000 = srcLow + (diff * 2.000)
line2272 = srcLow + (diff * 2.272)
line1272_2 = srcHigh - (diff * 1.272)
line1414_2 = srcHigh - (diff * 1.414)
line1618_2 = srcHigh - (diff * 1.618)
line2000_2 = srcHigh - (diff * 2.000)
line2272_2 = srcHigh - (diff * 2.272)

//Dibujar Trading Range
plot(line0000, title = "0.000", color = color.gray, transp= 90, trackprice = true, offset = -9999, linewidth = 2)
plot(line0500, title = "0.500", color = color.orange, transp= 90, trackprice = true, offset = -9999, linewidth = 2)
plot(line1000, title = "1.000", color = color.gray, transp= 90, trackprice = true, offset = -9999, linewidth = 2)
plotshape(line1000, color = color.red, transp=90, location = location.absolute, text="░░░")
plotshape(line0000, color = color.green, transp=90, location = location.absolute, text="░░░")   

//Gracias!