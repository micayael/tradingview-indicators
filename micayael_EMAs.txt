// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=4
study(title="micayael EMAs", shorttitle="micayael EMAs", overlay=true)

X = input(false, title="===== OPTIONS")

showSoloTradingLatino   = input(title='Show Only TradingLatino EMAs', type=input.bool, defval=true)
showMMAR   = input(title='Show MMAR', type=input.bool, defval=false)
showMA20   = input(title='Show MA20', type=input.bool, defval=false)
showADXDirection   = input(title='Show ADX Direction', type=input.bool, defval=true)

X := input(false, title="===== EMAs")

// EMAs
EMA_7 = input(title='EMA_7',type=input.integer, defval=7, minval=1)
EMA_21 = input(title='EMA_21',type=input.integer, defval=21, minval=1)
EMA_30 = input(title='EMA_30',type=input.integer, defval=30, minval=1)
EMA_50 = input(title='EMA_50',type=input.integer, defval=50, minval=1)
EMA_100 = input(title='EMA_100',type=input.integer, defval=100, minval=1)
EMA_200 = input(title='EMA_200',type=input.integer, defval=200, minval=1)
EMA_10 = input(title='EMA_10',type=input.integer, defval=10, minval=1)
EMA_55 = input(title='EMA_55',type=input.integer, defval=55, minval=1)

EMA7 = ema(close, EMA_7)
EMA21 = ema(close, EMA_21)
EMA30 = ema(close, EMA_30)
EMA50 = ema(close, EMA_50)
EMA100 = ema(close, EMA_100)
EMA200 = ema(close, EMA_200)
EMA10 = ema(close, EMA_10)
EMA55 = ema(close, EMA_55)

emasDefaultTransp = showSoloTradingLatino ? 100 : 0

plot(EMA7, title='EMA_7', color=color.blue, linewidth=1, transp=emasDefaultTransp)
plot(EMA21, title='EMA_21', color=color.lime, linewidth=1, display=display.none, transp=emasDefaultTransp)
plot(EMA30 ,title='EMA_30', color=color.fuchsia, linewidth=1, transp=emasDefaultTransp)
plot(EMA50, title='EMA_50', color=color.orange, linewidth=1, transp=emasDefaultTransp)
plot(EMA100, title='EMA_100', color=color.green, linewidth=1, transp=emasDefaultTransp)
plot(EMA200, title='EMA_200', color=color.yellow, linewidth=1, transp=emasDefaultTransp)
plot(EMA10, title='EMA_10', color=color.blue, linewidth=1, style=plot.style_circles, trackprice=true, join=true)
plot(EMA55, title='EMA_55', color=color.orange, linewidth=1, style=plot.style_circles, trackprice=true, join=true)


////////////////////////////////////////////////////////////////////////////////
// SHOW ADX DIRECTION
////////////////////////////////////////////////////////////////////////////////

X := input(false, title="===== ADX DIRECTION")

adx_lensig = input(14, title="ADX Smoothing", minval=1, maxval=50)
adx_len = input(14, minval=1, title="DI Length")
adx_up = change(high)
adx_down = -change(low)
adx_plusDM = na(adx_up) ? na : (adx_up > adx_down and adx_up > 0 ? adx_up : 0)
adx_minusDM = na(adx_down) ? na : (adx_down > adx_up and adx_down > 0 ? adx_down : 0)
adx_trur = rma(tr, adx_len)
adx_plus = fixnan(100 * rma(adx_plusDM, adx_len) / adx_trur)
adx_minus = fixnan(100 * rma(adx_minusDM, adx_len) / adx_trur)
adx_sum = adx_plus + adx_minus
adx = 100 * rma(abs(adx_plus - adx_minus) / (adx_sum == 0 ? 1 : adx_sum), adx_lensig)

plotshape(showADXDirection and adx[0] > 23 and (adx[0] < adx[1]), title="ADX disminuyendo", style=shape.circle, color=color.red, location=location.abovebar)
plotshape(showADXDirection and adx[0] > 23 and (adx[0] > adx[1]), title="ADX aumentando", style=shape.circle, color=color.green, location=location.abovebar)

plotshape(showADXDirection and adx[0] < 23 and (adx[0] < adx[1]), title="ADX disminuyendo", style=shape.circle, color=color.red, location=location.belowbar)
plotshape(showADXDirection and adx[0] < 23 and (adx[0] > adx[1]), title="ADX aumentando", style=shape.circle, color=color.green, location=location.belowbar)

////////////////////////////////////////////////////////////////////////////////
// EMA RIBBON
////////////////////////////////////////////////////////////////////////////////

PHI     = ( 1 + sqrt(5) ) / 2
PI   = 104348/33215

BULL = 1
BEAR = -1
NONE = 0


// v3 Style Gradient
GRN01 = #7CFC00, GRN02 = #32CD32, GRN03 = #228B22, GRN04 = #006400, GRN05 = #008000, GRN06=#093507
RED01 = #FF4500, RED02 = #FF0000, RED03 = #B22222, RED04 = #8B0000, RED05 = #800000, RED06=#330d06



// ──────────[ v3 Style Colors ]
AQUA    = #00FFFF
BLACK   = #000000
BLUE    = #0000FF
FUCHSIA = #FF00FF
GRAY    = #808080
GREEN   = #008000
LIME    = #00FF00
MAROON  = #800000
NAVY    = #000080
OLIVE   = #808000
ORANGE  = #FF7F00
PURPLE  = #800080
RUBI    = #FF0000
SILVER  = #C0C0C0
TEAL    = #008080
YELLOW  = #FFFF00
WHITE   = #FFFFFF 

AMARILLO_CLARO = #fff59d
NARANJA = #ff9900
ROJO = #b9271a

VERDE1 = #003d3c
VERDE2 = #367935
VERDE3 = #7cb77e
VERDE4 = #9fd2a5


////////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
////////////////////////////////////////////////////////////////////////////////

maColor(_ma, _maRef, _number) =>
    diffMA = change(_ma)
    if(_number==20)
        macol = diffMA>=0 and _ma>_maRef ? AMARILLO_CLARO : diffMA<0 and _ma>_maRef ? MAROON : diffMA<=0 and _ma<_maRef ? VERDE1 : diffMA>=0 and _ma<_maRef ? GREEN : GRAY
    else if(_number==50)
        macol = diffMA>=0 and _ma>_maRef ? AMARILLO_CLARO : diffMA<0 and _ma>_maRef ? MAROON : diffMA<=0 and _ma<_maRef ? VERDE1 : diffMA>=0 and _ma<_maRef ? GREEN : GRAY
    else if(_number==55)
        macol = diffMA>=0 and _ma>_maRef ? NARANJA : diffMA<0 and _ma>_maRef ? MAROON : diffMA<=0 and _ma<_maRef ? VERDE2 : diffMA>=0 and _ma<_maRef ? GREEN : GRAY
    else if(_number==60)
        macol = diffMA>=0 and _ma>_maRef ? NARANJA : diffMA<0 and _ma>_maRef ? MAROON : diffMA<=0 and _ma<_maRef ? VERDE3 : diffMA>=0 and _ma<_maRef ? GREEN : GRAY
    else if(_number==65)
        macol = diffMA>=0 and _ma>_maRef ? ROJO : diffMA<0 and _ma>_maRef ? MAROON : diffMA<=0 and _ma<_maRef ? VERDE4 : diffMA>=0 and _ma<_maRef ? GREEN : GRAY
    else
        macol = diffMA>=0 and _ma>_maRef ? LIME : diffMA<0 and _ma>_maRef ? MAROON : diffMA<=0 and _ma<_maRef ? RUBI : diffMA>=0 and _ma<_maRef ? GREEN : GRAY
            


////////////////////////////////////////////////////////////////////////////////
// PROCESO PRINCIPAL
////////////////////////////////////////////////////////////////////////////////

src = close

ma05  = ema(src, 05)
ma10  = ema(src, 10)
ma15  = ema(src, 15)
ma20  = ema(src, 20)
ma25  = ema(src, 25)
ma30  = ema(src, 30)
ma35  = ema(src, 35)
ma40  = ema(src, 40)
ma45  = ema(src, 45)
ma50  = ema(src, 50)
ma55  = ema(src, 55)
ma60  = ema(src, 60)
ma65  = ema(src, 65)
ma70  = ema(src, 70)
ma75  = ema(src, 75)
ma80  = ema(src, 80)
ma85  = ema(src, 85)
ma90  = ema(src, 90)
ma100 = ema(src, 100)



plot( ma05, color=maColor(ma05,ma100,5), style=plot.style_line, title="MMA05", linewidth=3, transp = showMMAR ? 0 : 100)
plot( ma10, color=maColor(ma10,ma100,10), style=plot.style_line, title="MMA10", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma15, color=maColor(ma15,ma100,15), style=plot.style_line, title="MMA15", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma20, color=maColor(ma20,ma100,20), style=plot.style_line, title="MMA20", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma25, color=maColor(ma25,ma100,25), style=plot.style_line, title="MMA25", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma30, color=maColor(ma30,ma100,30), style=plot.style_line, title="MMA30", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma35, color=maColor(ma35,ma100,35), style=plot.style_line, title="MMA35", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma40, color=maColor(ma40,ma100,40), style=plot.style_line, title="MMA40", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma45, color=maColor(ma45,ma100,45), style=plot.style_line, title="MMA45", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma50, color=maColor(ma50,ma100,50), style=plot.style_line, title="MMA50", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma55, color=maColor(ma55,ma100,55), style=plot.style_circles, title="MMA55", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma60, color=maColor(ma60,ma100,60), style=plot.style_line, title="MMA60", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma65, color=maColor(ma65,ma100,65), style=plot.style_line, title="MMA65", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma70, color=maColor(ma70,ma100,70), style=plot.style_line, title="MMA70", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma75, color=maColor(ma75,ma100,75), style=plot.style_line, title="MMA75", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma80, color=maColor(ma80,ma100,80), style=plot.style_line, title="MMA80", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma85, color=maColor(ma85,ma100,85), style=plot.style_line, title="MMA85", linewidth=1, transp = showMMAR ? 0 : 100)
plot( ma90, color=maColor(ma90,ma100,90), style=plot.style_line, title="MMA90", linewidth=3, transp = showMMAR ? 0 : 100)



////////////////////////////////////////////////////////////////////////////////
// Media movil de 20 periodos: CM_Ultimate_MA_MTF_V2
////////////////////////////////////////////////////////////////////////////////

X := input(false, title="===== MEDIA MOVIL DE 20 PERIODOS: MA20")

useCurrentRes = input(true, title="Use Current Chart Resolution?")
resCustom = input(title="Use Different Timeframe? Uncheck Box Above", type=input.resolution, defval="D")
len = input(20, title="Moving Average Length - LookBack Period")
//periodT3 = input(defval=7, title="Tilson T3 Period", minval=1) 
factorT3 = input(defval=7, title="Tilson T3 Factor - *.10 - so 7 = .7 etc.", minval=0) 
atype = input(1,minval=1,maxval=8,title="1=SMA, 2=EMA, 3=WMA, 4=HullMA, 5=VWMA, 6=RMA, 7=TEMA, 8=Tilson T3")
spc=input(false, title="Show Price Crossing 1st Mov Avg - Highlight Bar?")
cc = input(true,title="Change Color Based On Direction?")
smoothe = input(2, minval=1, maxval=10, title="Color Smoothing - Setting 1 = No Smoothing")
doma2 = input(false, title="Optional 2nd Moving Average")
spc2=input(false, title="Show Price Crossing 2nd Mov Avg?")
len2 = input(50, title="Moving Average Length - Optional 2nd MA")
sfactorT3 = input(defval=7, title="Tilson T3 Factor - *.10 - so 7 = .7 etc.", minval=0)
atype2 = input(1,minval=1,maxval=8,title="1=SMA, 2=EMA, 3=WMA, 4=HullMA, 5=VWMA, 6=RMA, 7=TEMA, 8=Tilson T3")
cc2 = input(true,title="Change Color Based On Direction 2nd MA?")
warn = input(false, title="***You Can Turn On The Show Dots Parameter Below Without Plotting 2nd MA to See Crosses***")
warn2 = input(false, title="***If Using Cross Feature W/O Plotting 2ndMA - Make Sure 2ndMA Parameters are Set Correctly***")
sd = input(false, title="Show Dots on Cross of Both MA's")

res = useCurrentRes ? timeframe.period : resCustom
//hull ma definition
hullma = wma(2*wma(src, len/2)-wma(src, len), round(sqrt(len)))
//TEMA definition
ema1 = ema(src, len)
ema2 = ema(ema1, len)
ema3 = ema(ema2, len)
tema = 3 * (ema1 - ema2) + ema3

//Tilson T3
factor = factorT3 *.10
gd(src, len, factor) => ema(src, len) * (1 + factor) - ema(ema(src, len), len) * factor 
t3(src, len, factor) => gd(gd(gd(src, len, factor), len, factor), len, factor) 
tilT3 = t3(src, len, factor) 
 

avg = atype == 1 ? sma(src,len) : atype == 2 ? ema(src,len) : atype == 3 ? wma(src,len) : atype == 4 ? hullma : atype == 5 ? vwma(src, len) : atype == 6 ? rma(src,len) : atype == 7 ? 3 * (ema1 - ema2) + ema3 : tilT3
//2nd Ma - hull ma definition
hullma2 = wma(2*wma(src, len2/2)-wma(src, len2), round(sqrt(len2)))
//2nd MA TEMA definition
sema1 = ema(src, len2)
sema2 = ema(sema1, len2)
sema3 = ema(sema2, len2)
stema = 3 * (sema1 - sema2) + sema3

//2nd MA Tilson T3
sfactor = sfactorT3 *.10
sgd(src, len2, sfactor) => ema(src, len2) * (1 + sfactor) - ema(ema(src, len2), len2) * sfactor 
st3(src, len2, sfactor) => sgd(sgd(gd(src, len2, sfactor), len2, sfactor), len2, sfactor) 
stilT3 = st3(src, len2, sfactor) 

avg2 = atype2 == 1 ? sma(src,len2) : atype2 == 2 ? ema(src,len2) : atype2 == 3 ? wma(src,len2) : atype2 == 4 ? hullma2 : atype2 == 5 ? vwma(src, len2) : atype2 == 6 ? rma(src,len2) : atype2 == 7 ? 3 * (ema1 - ema2) + ema3 : stilT3

out = avg 
out_two = avg2

out1 = security(syminfo.tickerid, res, out)
out2 = security(syminfo.tickerid, res, out_two)

//Formula for Price Crossing Moving Average #1
cr_up = open < out1 and close > out1
cr_Down = open > out1 and close < out1
//Formula for Price Crossing Moving Average #2
cr_up2 = open < out2 and close > out2
cr_Down2 = open > out2 and close < out2
//barcolor Criteria for Price Crossing Moving Average #1
iscrossUp() => cr_up
iscrossDown() => cr_Down
//barcolor Criteria for Price Crossing Moving Average #2
iscrossUp2() => cr_up2
iscrossDown2() => cr_Down2

ma_up = out1 >= out1[smoothe]
ma_down = out1 < out1[smoothe]

col = cc ? ma_up ? #00ff00 : ma_down ? color.red : color.aqua : color.aqua
col2 = cc2 ? ma_up ? #00ff00 : ma_down ? color.red : color.aqua : color.white

circleYPosition = out2

plot(out1, title="Multi-Timeframe Moving Avg", style=plot.style_line, linewidth=4, color = col, transp = showMA20 ? 0 : 100)
plot(doma2 and out2 ? out2 : na, title="2nd Multi-TimeFrame Moving Average", style=plot.style_circles, linewidth=4, color=col2, transp = showMA20 ? 0 : 100)
plot(sd and cross(out1, out2) ? circleYPosition : na,style=plot.style_cross, linewidth=15, color=color.aqua, transp = showMA20 ? 0 : 100)
//barcolor Plot for Price Crossing Moving Average #1
barcolor(spc and iscrossUp() ? (iscrossUp() ? color.yellow : na) : na)
barcolor(spc and iscrossDown() ? (iscrossDown() ? color.yellow : na) : na)
//barcolor Plot for Price Crossing Moving Average #2
barcolor(spc2 and iscrossUp2() ? (iscrossUp2() ? color.yellow : na) : na)
barcolor(spc2 and iscrossDown2() ? (iscrossDown2() ? color.yellow : na) : na)